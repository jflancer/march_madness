grid <- expand.grid(Tm1 = teams, Tm2 = teams, stringsAsFactors = F) %>%
arrange(Tm1) %>%
# Remove duplicate team against itself
filter(Tm1!=Tm2) %>%
mutate(
# Get bracket position of each team in the previous round
PrevRnd = df[[paste0("Rd",rnd-1)]][match(Tm1, df$Team)],
# Get probability team was "alive" in previous step
Psurvive = df[[paste0("Rd",rnd-1,"_Exact")]][match(Tm1, df$Team)]
) %>%
# Join back the exact dataframe to get other team probabilities
left_join(df, by = c("Tm2"="Team")) %>%
# Filter when teams were in same branch in previous round
# ie. Gonzaga cannot play Appalachian St. in round 3 because they went through the same branch so only one could survive
filter(PrevRnd != .[[paste0("Rd",rnd-1)]]) %>%
# Pull the probabilities that each team wins against each opponent
group_by(Tm1) %>%
do({
games <- filter(team_games, team == first(.$Tm1))
p <- games$probability[match(.$Tm2, games$opponent)]
# New probability is P(Team Alive in previous round) * P(Opponent Alive in previous round) * P(Team beats Opponent)
exact <- sum(.[[paste0("Rd",rnd-1,"_Exact")]] * .$Psurvive * p)
# Return as single numeric wrapped in df to fit grip
data.frame(exact)
})
# Add round probabilities using the calculation above
.[[paste0("Rd",rnd,"_Exact")]] <- grid$exact[match(.$Team, grid$Tm1)]
}
# Return the original dataframe with the new row modifications to RdX_Exact
.
})
print(rnd)
}
return(exact_prob)
}
# Output ####
final_table <- calculate_exact(build_bracket_df(), team_games) %>%
ungroup() %>%
select(Team, Rd0_Exact:Rd6_Exact) %>%
mutate(
across(matches("[0-9]"), ~ round(.x*100, 3)),
Seed = seeds[match(Team, march_madness_teams)],
Region = region[match(Team, march_madness_teams)]
) %>%
select(Region, Seed, Team,
First4 = Rd0_Exact, Round1 = Rd1_Exact, Round2 = Rd2_Exact, Sweet16 = Rd3_Exact, Elite8 = Rd4_Exact, Final4 = Rd5_Exact, Championship = Rd6_Exact)
View(team_ratings)
View(final_table)
View(all_data)
# Team Model ####
team_depth <- all_data %>%
filter(!(
paste0(cleanName, "_", Team) %in% injuries &
Season == "2020-21"
)) %>%
mutate(
PctMins = pmin((MINS+100) / (GP*40),1)
) %>%
group_by(Team, Season) %>%
slice_max(n=9, order_by = PctMins) %>%
mutate(
POSS. = pmin(PctMins / sum(PctMins), .2),
ExtraProb = 1 - sum(POSS.),
Non20 = sum(POSS. * (POSS. != .2)),
AddAmount = ifelse(POSS. == .2, 0, (POSS. / Non20) * ExtraProb),
PCT_Full = POSS. + AddAmount
)
team_ratings <- team_depth %>%
summarise(
ORAPM = sum(ORAPM * POSS., na.rm = T)*5,
DRAPM = sum(DRAPM * POSS., na.rm = T)*5,
.groups = "drop"
) %>%
mutate(
RAPM = ORAPM + DRAPM
)
View(team_ratings)
# Team Model ####
team_depth <- all_data %>%
filter(!(
paste0(cleanName, "_", Team) %in% injuries &
Season == "2020-21"
)) %>%
mutate(
PctMins = pmin((MINS+10) / (GP*40),1)
) %>%
group_by(Team, Season) %>%
slice_max(n=9, order_by = PctMins) %>%
mutate(
POSS. = pmin(PctMins / sum(PctMins), .2),
ExtraProb = 1 - sum(POSS.),
Non20 = sum(POSS. * (POSS. != .2)),
AddAmount = ifelse(POSS. == .2, 0, (POSS. / Non20) * ExtraProb),
PCT_Full = POSS. + AddAmount
)
team_ratings <- team_depth %>%
summarise(
ORAPM = sum(ORAPM * POSS., na.rm = T)*5,
DRAPM = sum(DRAPM * POSS., na.rm = T)*5,
.groups = "drop"
) %>%
mutate(
RAPM = ORAPM + DRAPM
)
View(team_ratings)
# Team Model ####
team_depth <- all_data %>%
filter(!(
paste0(cleanName, "_", Team) %in% injuries &
Season == "2020-21"
)) %>%
mutate(
PctMins = pmin((MINS+50) / (GP*40),1)
) %>%
group_by(Team, Season) %>%
slice_max(n=9, order_by = PctMins) %>%
mutate(
POSS. = pmin(PctMins / sum(PctMins), .2),
ExtraProb = 1 - sum(POSS.),
Non20 = sum(POSS. * (POSS. != .2)),
AddAmount = ifelse(POSS. == .2, 0, (POSS. / Non20) * ExtraProb),
PCT_Full = POSS. + AddAmount
)
View(team_depth)
200*.165
# Team Model ####
team_depth <- all_data %>%
filter(!(
paste0(cleanName, "_", Team) %in% injuries &
Season == "2020-21"
)) %>%
mutate(
PctMins = pmin(MINS / (GP*40),1)
) %>%
group_by(Team, Season) %>%
slice_max(n=9, order_by = PctMins) %>%
mutate(
POSS. = pmin(PctMins / sum(PctMins), .2),
ExtraProb = 1 - sum(POSS.),
Non20 = sum(POSS. * (POSS. != .2)),
AddAmount = ifelse(POSS. == .2, 0, (POSS. / Non20) * ExtraProb),
PCT_Full = POSS. + AddAmount
)
team_ratings <- team_depth %>%
summarise(
ORAPM = sum(ORAPM * POSS., na.rm = T)*5,
DRAPM = sum(DRAPM * POSS., na.rm = T)*5,
.groups = "drop"
) %>%
mutate(
RAPM = ORAPM + DRAPM
)
team_ratings <- team_depth %>%
summarise(
ORAPM = sum(ORAPM * PCT_Full, na.rm = T)*5,
DRAPM = sum(DRAPM * PCT_Full, na.rm = T)*5,
.groups = "drop"
) %>%
mutate(
RAPM = ORAPM + DRAPM
)
View(team_ratings)
full_rating <- team_ratings %>%
filter(Season == "2020-21") #%>%
# Game Predictions ####
game_prediction <- function(df, model, teams_vector, tm1, tm2, printData = F, long = F) {
# df: dataframe of team ratings
# model: model to predict possessions
# teams_vector: needed to map team name to column for model
# tm1, tm2: two teams using stats.ncaa formatted name
# useScaled: whether to use base rating or scaled rating in dataframe (ORAPM vs. scaledORAPM, etc.)
# printData: whether to print prediction output
# long: whether to return all outputs of prediction vs. just probability
exp_poss <- unname(predict(model,t(matrix((teams %in% c(tm1, tm2))*1)), type = "response")) / 2
# 97.12 = RAPM intercept for 20-21
tm1_score <- (df$ORAPM[df$Team == tm1] - df$DRAPM[df$Team  == tm2] + 97.12) * (exp_poss / 100)
tm2_score <- (df$ORAPM[df$Team == tm2] - df$DRAPM[df$Team  == tm1] + 97.12) * (exp_poss / 100)
# prob <- pnorm(tm1_score - tm2_score, 0, 6)
prob <- unname(predict(pointspread_glm, data.frame(pred_score_diff = tm1_score - tm2_score), type = "response"))
if(!printData & !long) {
return(prob)
}
else if(long & !printData) {
return(c(tm1_score, tm2_score, tm1_score+tm2_score, tm1_score - tm2_score, prob))
} else {
writeLines(paste(
tm1, "vs", tm2,
"\nExpected Score:", round(tm1_score), "-", round(tm2_score),
"\nExpected Total:", round(tm1_score + tm2_score),
"\nExpected Differential:", round(tm1_score - tm2_score,1),
"\n Expected Probability:", round(prob,2)))
return(c(tm1_score, tm2_score, tm1_score+tm2_score, tm1_score - tm2_score, prob))
}
}
game_prediction(full_rating, model, teams, "Gonzaga", "Baylor", T, F)
View(team_depth)
# Team Model ####
team_depth <- all_data %>%
filter(!(
paste0(cleanName, "_", Team) %in% injuries &
Season == "2020-21"
)) %>%
mutate(
PctMins = pmin(MINS / (GP*40),1)
) %>%
group_by(Team, Season) %>%
slice_max(n=10, order_by = PctMins) %>%
mutate(
POSS. = pmin(PctMins / sum(PctMins), .2),
ExtraProb = 1 - sum(POSS.),
Non20 = sum(POSS. * (POSS. != .2)),
AddAmount = ifelse(POSS. == .2, 0, (POSS. / Non20) * ExtraProb),
PCT_Full = POSS. + AddAmount
)
team_ratings <- team_depth %>%
summarise(
ORAPM = sum(ORAPM * PCT_Full, na.rm = T)*5,
DRAPM = sum(DRAPM * PCT_Full, na.rm = T)*5,
.groups = "drop"
) %>%
mutate(
RAPM = ORAPM + DRAPM
)
View(team_ratings)
# Team Model ####
team_depth <- all_data %>%
filter(!(
paste0(cleanName, "_", Team) %in% injuries &
Season == "2020-21"
)) %>%
mutate(
PctMins = pmin(MINS / (GP*40),1)
) %>%
group_by(Team, Season) %>%
slice_max(n=6, order_by = PctMins) %>%
mutate(
POSS. = pmin(PctMins / sum(PctMins), .2),
ExtraProb = 1 - sum(POSS.),
Non20 = sum(POSS. * (POSS. != .2)),
AddAmount = ifelse(POSS. == .2, 0, (POSS. / Non20) * ExtraProb),
PCT_Full = POSS. + AddAmount
)
team_ratings <- team_depth %>%
summarise(
ORAPM = sum(ORAPM * PCT_Full, na.rm = T)*5,
DRAPM = sum(DRAPM * PCT_Full, na.rm = T)*5,
.groups = "drop"
) %>%
mutate(
RAPM = ORAPM + DRAPM
)
View(team_ratings)
# Team Model ####
team_depth <- all_data %>%
filter(!(
paste0(cleanName, "_", Team) %in% injuries &
Season == "2020-21"
)) %>%
mutate(
PctMins = pmin(MINS / (GP*40),1)
) %>%
group_by(Team, Season) %>%
slice_max(n=7, order_by = PctMins) %>%
mutate(
POSS. = pmin(PctMins / sum(PctMins), .2),
ExtraProb = 1 - sum(POSS.),
Non20 = sum(POSS. * (POSS. != .2)),
AddAmount = ifelse(POSS. == .2, 0, (POSS. / Non20) * ExtraProb),
PCT_Full = POSS. + AddAmount
)
team_ratings <- team_depth %>%
summarise(
ORAPM = sum(ORAPM * PCT_Full, na.rm = T)*5,
DRAPM = sum(DRAPM * PCT_Full, na.rm = T)*5,
.groups = "drop"
) %>%
mutate(
RAPM = ORAPM + DRAPM
)
View(team_ratings)
# Team Model ####
team_depth <- all_data %>%
filter(!(
paste0(cleanName, "_", Team) %in% injuries &
Season == "2020-21"
)) %>%
mutate(
PctMins = pmin(MINS / (GP*40),1)
) %>%
group_by(Team, Season) %>%
slice_max(n=8, order_by = PctMins) %>%
mutate(
POSS. = pmin(PctMins / sum(PctMins), .2),
ExtraProb = 1 - sum(POSS.),
Non20 = sum(POSS. * (POSS. != .2)),
AddAmount = ifelse(POSS. == .2, 0, (POSS. / Non20) * ExtraProb),
PCT_Full = POSS. + AddAmount
)
team_ratings <- team_depth %>%
summarise(
ORAPM = sum(ORAPM * PCT_Full, na.rm = T)*5,
DRAPM = sum(DRAPM * PCT_Full, na.rm = T)*5,
.groups = "drop"
) %>%
mutate(
RAPM = ORAPM + DRAPM
)
View(team_ratings)
# Team Model ####
team_depth <- all_data %>%
filter(!(
paste0(cleanName, "_", Team) %in% injuries &
Season == "2020-21"
)) %>%
mutate(
PctMins = pmin(MINS / (GP*40),1)
) %>%
group_by(Team, Season) %>%
slice_max(n=9, order_by = PctMins) %>%
mutate(
POSS. = pmin(PctMins / sum(PctMins), .2),
ExtraProb = 1 - sum(POSS.),
Non20 = sum(POSS. * (POSS. != .2)),
AddAmount = ifelse(POSS. == .2, 0, (POSS. / Non20) * ExtraProb),
PCT_Full = POSS. + AddAmount
)
team_ratings <- team_depth %>%
summarise(
ORAPM = sum(ORAPM * PCT_Full, na.rm = T)*5,
DRAPM = sum(DRAPM * PCT_Full, na.rm = T)*5,
.groups = "drop"
) %>%
mutate(
RAPM = ORAPM + DRAPM
)
View(team_ratings)
# Team Model ####
team_depth <- all_data %>%
filter(!(
paste0(cleanName, "_", Team) %in% injuries &
Season == "2020-21"
)) %>%
mutate(
PctMins = pmin(MINS / (GP*40),1)
) %>%
group_by(Team, Season) %>%
slice_max(n=9, order_by = PctMins) %>%
mutate(
POSS. = pmin(PctMins / sum(PctMins), .2),
ExtraProb = 1 - sum(POSS.),
Non20 = sum(POSS. * (POSS. != .2)),
AddAmount = ifelse(POSS. == .2, 0, (POSS. / Non20) * ExtraProb),
PCT_Full = POSS. + AddAmount
)
team_ratings <- team_depth %>%
summarise(
ORAPM = sum(ORAPM * PCT_Full, na.rm = T)*5,
DRAPM = sum(DRAPM * PCT_Full, na.rm = T)*5,
.groups = "drop"
) %>%
mutate(
RAPM = ORAPM + DRAPM
)
full_rating <- team_ratings %>%
filter(Season == "2020-21") #%>%
# Game Predictions ####
game_prediction <- function(df, model, teams_vector, tm1, tm2, printData = F, long = F) {
# df: dataframe of team ratings
# model: model to predict possessions
# teams_vector: needed to map team name to column for model
# tm1, tm2: two teams using stats.ncaa formatted name
# useScaled: whether to use base rating or scaled rating in dataframe (ORAPM vs. scaledORAPM, etc.)
# printData: whether to print prediction output
# long: whether to return all outputs of prediction vs. just probability
exp_poss <- unname(predict(model,t(matrix((teams %in% c(tm1, tm2))*1)), type = "response")) / 2
# 97.12 = RAPM intercept for 20-21
tm1_score <- (df$ORAPM[df$Team == tm1] - df$DRAPM[df$Team  == tm2] + 97.12) * (exp_poss / 100)
tm2_score <- (df$ORAPM[df$Team == tm2] - df$DRAPM[df$Team  == tm1] + 97.12) * (exp_poss / 100)
# prob <- pnorm(tm1_score - tm2_score, 0, 6)
prob <- unname(predict(pointspread_glm, data.frame(pred_score_diff = tm1_score - tm2_score), type = "response"))
if(!printData & !long) {
return(prob)
}
else if(long & !printData) {
return(c(tm1_score, tm2_score, tm1_score+tm2_score, tm1_score - tm2_score, prob))
} else {
writeLines(paste(
tm1, "vs", tm2,
"\nExpected Score:", round(tm1_score), "-", round(tm2_score),
"\nExpected Total:", round(tm1_score + tm2_score),
"\nExpected Differential:", round(tm1_score - tm2_score,1),
"\n Expected Probability:", round(prob,2)))
return(c(tm1_score, tm2_score, tm1_score+tm2_score, tm1_score - tm2_score, prob))
}
}
game_prediction(full_rating, model, teams, "Gonzaga", "Baylor", T, F)
game_prediction(full_rating, model, teams, "UConn", "Alabama", T, F)
game_prediction(full_rating, model, teams, "Gonzaga", "Baylor", T, F)
game_prediction(full_rating, model, teams, "Oregon", "Iowa", T, F)
game_prediction(full_rating, model, teams, "Oregon", "Iowa", T, F)
game_prediction(full_rating, model, teams, "Southern California", "Kansas", T, F)
View(full_rating)
View(final_table)
View(final_table)
View(final_table)
game_prediction(full_rating, model, teams, "Villanova", "Purdue", T, F)
# Game Predictions ####
game_prediction <- function(df, model, teams_vector, tm1, tm2, printData = F, long = F) {
# df: dataframe of team ratings
# model: model to predict possessions
# teams_vector: needed to map team name to column for model
# tm1, tm2: two teams using stats.ncaa formatted name
# useScaled: whether to use base rating or scaled rating in dataframe (ORAPM vs. scaledORAPM, etc.)
# printData: whether to print prediction output
# long: whether to return all outputs of prediction vs. just probability
exp_poss <- unname(predict(model,t(matrix((teams %in% c(tm1, tm2))*1)), type = "response")) / 2
# 97.12 = RAPM intercept for 20-21
tm1_score <- (df$ORAPM[df$Team == tm1] - df$DRAPM[df$Team  == tm2] + 97.12) * (exp_poss / 100)
tm2_score <- (df$ORAPM[df$Team == tm2] - df$DRAPM[df$Team  == tm1] + 97.12) * (exp_poss / 100)
# prob <- unname(predict(pointspread_glm, data.frame(pred_score_diff = tm1_score - tm2_score), type = "response"))
prob <- pnorm()
if(!printData & !long) {
return(prob)
}
else if(long & !printData) {
return(c(tm1_score, tm2_score, tm1_score+tm2_score, tm1_score - tm2_score, prob))
} else {
writeLines(paste(
tm1, "vs", tm2,
"\nExpected Score:", round(tm1_score), "-", round(tm2_score),
"\nExpected Total:", round(tm1_score + tm2_score),
"\nExpected Differential:", round(tm1_score - tm2_score,1),
"\n Expected Probability:", round(prob,2)))
return(c(tm1_score, tm2_score, tm1_score+tm2_score, tm1_score - tm2_score, prob))
}
}
game_prediction(full_rating, model, teams, "Southern California", "Kansas", T, F)
?pnorm
# Game Predictions ####
game_prediction <- function(df, model, teams_vector, tm1, tm2, printData = F, long = F) {
# df: dataframe of team ratings
# model: model to predict possessions
# teams_vector: needed to map team name to column for model
# tm1, tm2: two teams using stats.ncaa formatted name
# useScaled: whether to use base rating or scaled rating in dataframe (ORAPM vs. scaledORAPM, etc.)
# printData: whether to print prediction output
# long: whether to return all outputs of prediction vs. just probability
exp_poss <- unname(predict(model,t(matrix((teams %in% c(tm1, tm2))*1)), type = "response")) / 2
# 97.12 = RAPM intercept for 20-21
tm1_score <- (df$ORAPM[df$Team == tm1] - df$DRAPM[df$Team  == tm2] + 97.12) * (exp_poss / 100)
tm2_score <- (df$ORAPM[df$Team == tm2] - df$DRAPM[df$Team  == tm1] + 97.12) * (exp_poss / 100)
# prob <- unname(predict(pointspread_glm, data.frame(pred_score_diff = tm1_score - tm2_score), type = "response"))
prob <- pnorm(tm1_score - tm2_score, 0, 7)
if(!printData & !long) {
return(prob)
}
else if(long & !printData) {
return(c(tm1_score, tm2_score, tm1_score+tm2_score, tm1_score - tm2_score, prob))
} else {
writeLines(paste(
tm1, "vs", tm2,
"\nExpected Score:", round(tm1_score), "-", round(tm2_score),
"\nExpected Total:", round(tm1_score + tm2_score),
"\nExpected Differential:", round(tm1_score - tm2_score,1),
"\n Expected Probability:", round(prob,2)))
return(c(tm1_score, tm2_score, tm1_score+tm2_score, tm1_score - tm2_score, prob))
}
}
game_prediction(full_rating, model, teams, "Southern California", "Kansas", T, F)
game_prediction(full_rating, model, teams, "Gonzaga", "Baylor", T, F)
# Game Predictions ####
game_prediction <- function(df, model, teams_vector, tm1, tm2, printData = F, long = F) {
# df: dataframe of team ratings
# model: model to predict possessions
# teams_vector: needed to map team name to column for model
# tm1, tm2: two teams using stats.ncaa formatted name
# useScaled: whether to use base rating or scaled rating in dataframe (ORAPM vs. scaledORAPM, etc.)
# printData: whether to print prediction output
# long: whether to return all outputs of prediction vs. just probability
exp_poss <- unname(predict(model,t(matrix((teams %in% c(tm1, tm2))*1)), type = "response")) / 2
# 97.12 = RAPM intercept for 20-21
tm1_score <- (df$ORAPM[df$Team == tm1] - df$DRAPM[df$Team  == tm2] + 97.12) * (exp_poss / 100)
tm2_score <- (df$ORAPM[df$Team == tm2] - df$DRAPM[df$Team  == tm1] + 97.12) * (exp_poss / 100)
prob <- unname(predict(pointspread_glm, data.frame(pred_score_diff = tm1_score - tm2_score), type = "response"))
if(!printData & !long) {
return(prob)
}
else if(long & !printData) {
return(c(tm1_score, tm2_score, tm1_score+tm2_score, tm1_score - tm2_score, prob))
} else {
writeLines(paste(
tm1, "vs", tm2,
"\nExpected Score:", round(tm1_score), "-", round(tm2_score),
"\nExpected Total:", round(tm1_score + tm2_score),
"\nExpected Differential:", round(tm1_score - tm2_score,1),
"\n Expected Probability:", round(prob,2)))
return(c(tm1_score, tm2_score, tm1_score+tm2_score, tm1_score - tm2_score, prob))
}
}
game_prediction(full_rating, model, teams, "Gonzaga", "Baylor", T, F)
library(bigballR)
library(tidyverse)
library(Matrix)
library(glmnet)
library(RMariaDB)
conn <- dbConnect(
RMariaDB::MariaDB(),
user = Sys.getenv("USER_ID"),
password = Sys.getenv("PASSWORD"),
dbname = Sys.getenv("DB_NAME"),
host = "localhost"
)
